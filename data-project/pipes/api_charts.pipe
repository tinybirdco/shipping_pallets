TOKEN "Daniels, Lane and Farrell token" READ

TOKEN "Conrad Inc token" READ

TOKEN "api_charts_endpoint_read_5435" READ

TOKEN "Bird Inc token" READ

NODE chart_shipments
SQL >

    %
    SELECT 
      customer_name,
      {% if date_diff_in_days(date_to, date_from, date_format="%Y-%m-%dT%H:%M:%S.%fz") < 45 %}
      shipping_date t,
      {% else %}
      toStartOfMonth(shipping_date) t,
      {% end %}
      count() as total_shipments
    FROM bq_shipping_pallets
    WHERE timestamp >= parseDateTimeBestEffort({{String(date_from, '2023-06-10T00:00:00.000Z', required=True)}})
    AND timestamp <= parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59.999Z', required=True)}})
    GROUP BY customer_name, t
    ORDER BY t ASC



NODE chart_on_time_drop_offs
SQL >

    %
    SELECT 
      customer_name,
      {% if date_diff_in_days(date_to, date_from, date_format="%Y-%m-%dT%H:%M:%S.%fz") < 45 %}
      shipping_date t,
      {% else %}
      toStartOfMonth(shipping_date) t,
      {% end %}
      sumIf(delivered_on_time='true',1) as on_time_drop_offs,
      count()-on_time_drop_offs as delayed_drop_offs
    FROM bq_shipping_pallets
    WHERE timestamp >= parseDateTimeBestEffort({{String(date_from, '2023-06-10T00:00:00.000Z', required=True)}})
    AND timestamp <= parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59.999Z', required=True)}})
    GROUP BY customer_name, t
    ORDER BY t ASC



NODE chart_total_spent
SQL >

    %
    SELECT 
      customer_name,
      {% if date_diff_in_days(date_to, date_from, date_format="%Y-%m-%dT%H:%M:%S.%fz") < 45 %}
      shipping_date t,
      {% else %}
      toStartOfMonth(shipping_date) t,
      {% end %}
      round(sum(price),3) as total_spent
    FROM bq_shipping_pallets
    WHERE timestamp >= parseDateTimeBestEffort({{String(date_from, '2023-06-10T00:00:00.000Z', required=True)}})
    AND timestamp <= parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59.999Z', required=True)}})
    GROUP BY customer_name, t
    ORDER BY t ASC



NODE chart_pallets
SQL >

    %
    SELECT 
      customer_name,
      {% if date_diff_in_days(date_to, date_from, date_format="%Y-%m-%dT%H:%M:%S.%fz") < 45 %}
      shipping_date t,
      {% else %}
      toStartOfMonth(shipping_date) t,
      {% end %}
      sum(pallets) as total_pallets
    FROM bq_shipping_pallets
    WHERE timestamp >= parseDateTimeBestEffort({{String(date_from, '2023-06-10T00:00:00.000Z', required=True)}})
    AND timestamp <= parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59.999Z', required=True)}})
    GROUP BY customer_name, t
    ORDER BY t ASC



NODE chart_on_time_pick_ups
SQL >

    %
    SELECT 
      customer_name,
      {% if date_diff_in_days(date_to, date_from, date_format="%Y-%m-%dT%H:%M:%S.%fz") < 45 %}
      shipping_date t,
      {% else %}
      toStartOfMonth(shipping_date) t,
      {% end %}
      sumIf(picked_up_on_time='true',1) as on_time_pick_ups,
      count()-on_time_pick_ups as delayed_pick_ups
    FROM bq_shipping_pallets
    WHERE timestamp >= parseDateTimeBestEffort({{String(date_from, '2023-06-10T00:00:00.000Z', required=True)}})
    AND timestamp <= parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59.999Z', required=True)}})
    GROUP BY customer_name, t
    ORDER BY t ASC



NODE fill_months
SQL >

    %
    WITH
      toMonth(parseDateTimeBestEffort({{String(date_from, '2023-01-01T00:00:00Z', required=True)}})) AS month_from,
      toMonth(parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59Z', required=True)}})) AS month_to
    SELECT
      if(month_from==month_to, arrayJoin([month_from]), arrayJoin(range(month_from, month_to+1, 1))) as t




NODE fill_dates
SQL >

    %
    SELECT toDate(parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59Z', required=True)}})) AS t
    ORDER BY t ASC
    WITH FILL
    FROM toDate(parseDateTimeBestEffort({{String(date_from, '2023-07-01T00:00:00Z', required=True)}}))
           TO toDate(parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59Z', required=True)}})) 
           STEP interval 1 day



NODE fill_weeks
SQL >

    %
    SELECT toStartOfWeek(parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59Z', required=True)}}),1) AS t
    ORDER BY t ASC
    WITH FILL
    FROM toStartOfWeek(parseDateTimeBestEffort({{String(date_from, '2023-07-01T00:00:00Z', required=True)}}),1)
           TO toStartOfWeek(parseDateTimeBestEffort({{String(date_to, '2023-07-31T23:59:59Z', required=True)}}),1) 
           STEP interval 1 week



NODE endpoint
SQL >

    %
    {% if not defined(kpi) or kpi not in ['shipments','pallets','spending','service','urgency'] %}
      {{ error('kpi query param is required and needs to be one of the following: shipment, pallets, spent, on_time_pickups, on_time_dropoffs') }}
    {% end %}
    SELECT *
    {%if kpi == 'shipments'%}
    FROM chart_shipments
    {%elif kpi == 'service'%}
    FROM chart_on_time_drop_offs
    {%elif kpi == 'pallets'%}
    FROM chart_pallets
    {%elif kpi == 'spending'%}
    FROM chart_total_spent
    {%elif kpi == 'urgency'%}
    FROM chart_on_time_pick_ups
    {%else%}
    FROM chart_total_spent
    {%end%}
    RIGHT JOIN fill_dates USING t



